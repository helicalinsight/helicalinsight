<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xmlns="http://java.sun.com/xml/ns/javaee"
         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee
         http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" version="3.0">

    <display-name>Helical Insight</display-name>
    <description>The Business Intelligence Framework</description>

    <context-param>
        <param-name>contextConfigLocation</param-name>
        <param-value>classpath:application-context.xml, classpath:spring-security.xml</param-value>
    </context-param>

    <listener>
        <listener-class>com.helicalinsight.efw.framework.BootTimeListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>

    <listener>
        <listener-class>com.helicalinsight.scheduling.ApplicationEventsListener</listener-class>
    </listener>

    <listener>
        <listener-class>org.springframework.web.context.request.RequestContextListener</listener-class>
    </listener>

    <!-- Uncoment the below to enable cross origin -->

    <!--<filter>
        <filter-name>cross-origin</filter-name>
        <filter-class>org.eclipse.jetty.servlets.CrossOriginFilter</filter-class>
        <init-param>
            <param-name>allowedHeaders</param-name>
            <param-value>*</param-value>
        </init-param>
        <init-param>
            <param-name>allowedMethods</param-name>
            <param-value>GET,PUT,POST,DELETE,OPTIONS</param-value>
        </init-param>
        <init-param>
            <param-name>allowedOrigins</param-name>
            <param-value>*</param-value>
        </init-param>
        <init-param>
            <param-name>preflightMaxAge</param-name>
            <param-value>3600</param-value>
        </init-param>
        <init-param>
            <param-name>chainPreflight</param-name>
            <param-value>false</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>cross-origin</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>-->



    <filter>
        <filter-name>errorLogger</filter-name>
        <filter-class>com.helicalinsight.efw.filters.ErrorInterceptorFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>errorLogger</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- Filter for security -->
    <filter>
        <filter-name>springSecurityFilterChain</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>springSecurityFilterChain</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>formDataEncryptDecryptFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>formDataEncryptDecryptFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>validationFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>validationFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!--READ ME-->
    <!--The filter is placed before the authentication filter as the authentication
    filter requires all the parameters including the multi-part form request.-->
    <filter>
        <description>
            Check for multipart HttpServletRequests and parse the multipart form data so that all
            regular form fields are available in the parameterMap of the HttpServletRequest and that
            all form file fields are available as attribute of the HttpServletRequest. The attribute
            value of a form file field can be an instance of FileItem or FileUploadException.
        </description>
        <filter-name>multipartFilter</filter-name>
        <filter-class>com.helicalinsight.efw.filters.MultipartFilter</filter-class>
        <init-param>
            <description>
                Sets the maximum file size of the uploaded file in bytes. Set to 0 to indicate an
                unlimited file size. The value 1048576 indicates file size of
                1MB. This parameter is not required and can be removed safely.
            </description>
            <param-name>maxFileSize</param-name>
            <param-value>0</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>multipartFilter</filter-name>
        <url-pattern>/importFile.html</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>resourceAuthenticationFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>resourceAuthenticationFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <display-name>sessionTimeOutFilter</display-name>
        <filter-name>sessionTimeOutFilter</filter-name>
        <filter-class>com.helicalinsight.efw.filters.SessionTimeOutFilter</filter-class>
    </filter>

    <filter-mapping>
        <filter-name>sessionTimeOutFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>cacheFilter</filter-name>
        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
        <init-param>
            <param-name>targetFilterLifecycle</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>cacheFilter</filter-name>
        <url-pattern>/executeDatasource.html</url-pattern>
        <url-pattern>/visualizeData.html</url-pattern>
        <url-pattern>/exportData.html</url-pattern>
        <url-pattern>/getEFWSolution.html</url-pattern>
        <url-pattern>/services.html</url-pattern>
        <url-pattern>/services/*</url-pattern>
        <url-pattern>/hi.html</url-pattern>
    </filter-mapping>

    <filter>
        <filter-name>encodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <init-param>
            <param-name>encoding</param-name>
            <param-value>UTF-8</param-value>
        </init-param>
        <init-param>
            <param-name>forceEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>

    <filter-mapping>
        <filter-name>encodingFilter</filter-name>
        <url-pattern>/*</url-pattern>
    </filter-mapping>


    <servlet>
        <servlet-name>dispatcher-servlet</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:dispatcher-servlet.xml</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>dispatcher-servlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>productInfo</servlet-name>
        <servlet-class>com.helicalinsight.efw.ProductInformation</servlet-class>
    </servlet>

    <servlet-mapping>
        <servlet-name>productInfo</servlet-name>
        <url-pattern>/getProductInformation.html</url-pattern>
    </servlet-mapping>

    <servlet>
        <servlet-name>jersey-serlvet</servlet-name>
        <servlet-class>com.sun.jersey.spi.container.servlet.ServletContainer</servlet-class>
        <!--<init-param>
            <param-name>com.sun.jersey.config.property.packages</param-name>
            <param-value>your.package.name</param-value>
        </init-param>
        -->
        <init-param>
            <param-name>com.sun.jersey.config.feature.Redirect</param-name>
            <param-value>true</param-value>
        </init-param>
        <init-param>
            <param-name>com.sun.jersey.config.property.JSPTemplatesBasePath</param-name>
            <param-value>/WEB-INF/jsp/</param-value>
        </init-param>
        <init-param>
            <param-name>com.sun.jersey.config.property.WebPageContentRegex</param-name>
            <param-value>/(images|css|jsp)/.*</param-value>
        </init-param>
    </servlet>

    <servlet-mapping>
        <servlet-name>jersey-serlvet</servlet-name>
        <url-pattern>/api/*</url-pattern>
    </servlet-mapping>

    <welcome-file-list>
        <welcome-file>/</welcome-file>
    </welcome-file-list>

    <error-page>
        <exception-type>java.lang.Throwable</exception-type>
        <location>/WEB-INF/jsp/errorPage.jsp</location>
    </error-page>

    <error-page>
        <error-code>404</error-code>
        <location>/WEB-INF/jsp/pageNotFound.jsp</location>
    </error-page>

    <jsp-config>
        <!--taglib>
            <taglib-uri>spring.security.taglib.tld</taglib-uri>
            <taglib-location>/WEB-INF/security.tld</taglib-location>
        </taglib -->

        <jsp-property-group>
            <url-pattern>*.jsp</url-pattern>
            <page-encoding>UTF-8</page-encoding>
            <url-pattern>*.jsp</url-pattern>
            <trim-directive-whitespaces>true</trim-directive-whitespaces>
        </jsp-property-group>
    </jsp-config>

    <session-config>
        <session-timeout>30</session-timeout>
    </session-config>
</web-app>
